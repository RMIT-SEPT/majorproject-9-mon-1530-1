version: 2.1 


orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0

jobs: # a collection of steps
   build-front-end:
         docker:
           - image: circleci/node:12.9.1-browsers
         steps:
           - checkout
#           - restore_cache:
#               keys:
#                 - v1-dependencies-{{ checksum "FrontEnd/package.json" }}
#                 - v1-dependencies-
           - run: cd FrontEnd && docker build -t testfrontend
#           - save_cache:
#               paths:
#                 - node_modules
#                 - ~/.npm
#                 - ~/.cache
#               key: v1-dependencies-{{ checksum "FrontEnd/package.json" }}
#          - run: cd FrontEnd && npm test -- --watchAll=false
#           - run: cd FrontEnd && npm start

  docker-build-deploy-backend:
    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk

    parameters:
      backedn_service_dir_name:
        type: string

    steps: # a collection of executable commands 
    - checkout # check out source code to working directory
    - setup_remote_docker
    
    - run: echo 'parameter, << parameters.backedn_service_dir_name >>' 
    
    
    - run:
        name: Setup common environment variables
        command: |
          echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
          echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:<< parameters.backedn_service_dir_name >>"' >> $BASH_ENV

    - run: echo $FULL_IMAGE_NAME
    
    - run:
        name: Install dependencies for AWS
        command: |
          sudo apt-get update
          sudo apt-get -y -qq install awscli
          sudo apt-get install python3-pip
          sudo pip3 install --upgrade awscli

    - attach_workspace:
        at: dependency

    - run: ls -R
      
    - run:
        name: Build image
        command: |
          cd dependency/<< parameters.backedn_service_dir_name >> 
          docker build -t $FULL_IMAGE_NAME .

    - run:
        name: Push image
        command: |
          eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
          docker push $FULL_IMAGE_NAME
            
  build-common: # runs not using Workflows must have a `build` job as entry point
    #working_directory: ~/BackEnd/Common # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk

    steps: # a collection of executable commands 

      - run: echo "------------ START ---------------"
      - run: echo working_directory $working_directory
      - run: pwd

      - checkout # check out source code to working directory

      - run: ls -l

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: sept-p9-common-service-{{ checksum "BackEnd/Common/pom.xml" }}
      
      
      - run: cd BackEnd/Common && mvn dependency:go-offline # gets the project dependencies
      
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: sept-p9-common-service-{{ checksum "BackEnd/Common/pom.xml" }}
      
      - run: cd BackEnd/Common && mvn package # run the actual tests
      
      - run: ls ../.m2 -R
            
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: BackEnd/Common/target/surefire-reports
      
      - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: BackEnd/Common/target/common-1.1.1.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples  
      
      
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: BackEnd/
          # Must be relative path from root
          paths:
            - Common/target/common-1.1.1.jar
            - Common/pom.xml

workflows:
  version: 2
  workflow:
    jobs:
    - build-front-end
    # - build-common
    # - build-availability:
        # requires:
          # - build-common
    # - docker-build-deploy-backend:
        # backedn_service_dir_name: Availability
        # requires:
          # - build-availability

    # - build-hours:
        # requires:
          # - build-common
    # - docker-build-deploy-backend:
        # backedn_service_dir_name: Hours
        # requires:
          # - build-hours

    # - build-bookings:
        # requires:
          # - build-common
    # - docker-build-deploy-backend:
        # backedn_service_dir_name: Bookings
        # requires:
          # - build-bookings

    # - build-users:
        # requires:
          # - build-common
    # - docker-build-deploy-backend:
        # backedn_service_dir_name: Users
        # requires:
          # - build-users
