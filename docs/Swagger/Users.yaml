---
swagger: "2.0"
info:
  description: API for creating, modifying and deleting users
  version: 1.0.0
  title: Users API
  contact:
    email: s3718834@student.rmit.edu.au
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /SEPT-Assignment-One/User/1.0.0
schemes:
- https
paths:
  /user/bulk:
    get:
      summary: Retrieve numerous users
      description: |
        Gets all users, can be filter to userType
      operationId: getBulkUsers
      produces:
      - application/json
      parameters:
      - name: userType
        in: query
        description: Retrive only users with these userTypes
        required: false
        type: array
        items:
          type: string
          enum:
          - customer
          - worker
          - admin
        collectionFormat: multi
      responses:
        "200":
          description: all existing admins
          schema:
            type: array
            items:
              $ref: '#/definitions/validUser'
        "404":
          description: no admins found
  /user:
    get:
      summary: Get user
      description: |
        Retrieves all details for provided user
      operationId: getUser
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The userName of the user that should be retrieved
        required: true
        type: string
      responses:
        "200":
          description: The details of the user
          schema:
            $ref: '#/definitions/validUser'
        "400":
          description: userId incorrectly formatted
        "404":
          description: user does not exist
    post:
      summary: Create a user
      consumes:
      - application/json
      parameters:
      - in: body
        name: user
        description: The user to create
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        "200":
          description: user created
          schema:
            $ref: '#/definitions/validUser'
        "400":
          description: invalid input
        "409":
          description: user already exists
    delete:
      summary: Delete a user
      description: |
        Deletes provided user
      operationId: deleteUser
      parameters:
      - name: userName
        in: query
        description: userName of the user to be deleted
        required: true
        type: string
      responses:
        "200":
          description: user successfully deleted
        "400":
          description: incorrectly formated userId provided
        "404":
          description: user doesn't exist
    patch:
      summary: Update a user
      consumes:
      - application/json
      parameters:
      - in: body
        name: user
        description: The fields to modify
        required: false
        schema:
          $ref: '#/definitions/user_1'
      - name: userName
        in: query
        description: The userName of the user being modified
        required: true
        type: string
      responses:
        "200":
          description: bookings based on query parameters provided
          schema:
            $ref: '#/definitions/validUser'
        "400":
          description: invalid input
        "404":
          description: user doesn't exist
  /user/password:
    put:
      summary: Update a password
      consumes:
      - application/json
      parameters:
      - in: body
        name: password
        description: The fields to modify
        required: false
        schema:
          $ref: '#/definitions/password'
      - name: userName
        in: query
        description: The userName of the user whose password is being modified
        required: true
        type: string
      responses:
        "200":
          description: password successfully updated
        "400":
          description: invalid input
        "404":
          description: user doesn't exist
  /user/password/compare:
    post:
      summary: Checks if provided password matches the password stored
      consumes:
      - application/json
      parameters:
      - in: body
        name: password
        required: false
        schema:
          $ref: '#/definitions/password_1'
      responses:
        "200":
          description: provided password matches password stored
        "400":
          description: invalid request
definitions:
  validUser:
    properties:
      userType:
        type: string
        description: the type of user
        enum:
        - Customer
        - Worker
        - Admin
      name:
        type: string
        example: John James Smith
        description: The name of the user
      username:
        type: string
        example: JJSmith
        description: the username of the user
      phone:
        type: string
        example: (03)99252000
        description: The phone number of the user
      address:
        type: string
        example: 124 La Trobe St, Melbourne VIC 3000
        description: The street address which the user resides in
  user:
    type: object
    required:
    - name
    - password
    - userType
    - username
    properties:
      userType:
        type: string
        description: the type of user
        enum:
        - Customer
        - Worker
        - Admin
      password:
        type: string
        example: hunter2
        description: The user's password
      name:
        type: string
        example: John James Smith
        description: The name of the user
      username:
        type: string
        example: JJSmith
        description: the username of the user
      phone:
        type: string
        example: (03)99252000
        description: The phone number of the user
      address:
        type: string
        example: 124 La Trobe St, Melbourne VIC 3000
        description: The street address which the user resides in
  user_1:
    type: object
    properties:
      userType:
        type: string
        description: the type of user
        enum:
        - Customer
        - Worker
        - Admin
      name:
        type: string
        example: John James Smith
        description: The name of the user
      phone:
        type: string
        example: (03)99252000
        description: The phone number of the user
      address:
        type: string
        example: 124 La Trobe St, Melbourne VIC 3000
        description: The street address which the user resides in
  password:
    type: object
    required:
    - newPassword
    - oldPassword
    properties:
      oldPassword:
        type: string
        example: hunter2
        description: The users old password
      newPassword:
        type: string
        example: 2retnuh
        description: The users new password
  password_1:
    type: object
    required:
    - password
    properties:
      userName:
        type: string
        example: "00001"
        description: the username of the user who the password belongs to
      password:
        type: string
        example: hunter2
        description: The password to be compared against the stored password
